// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Supabase
model User {
  id         String    @id @default(uuid())
  email      String    @unique
  name       String? 
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  note       Note[]
  folders    Folder[]
  tags       Tag[]

  // NextAuth : Relationships
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
}

model Note {
  id           String    @id @default(uuid())
  title        String    @default("New Note")
  content      Json
  previewText  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isArchived   Boolean   @default(false)
  isPinned     Boolean   @default(false)

  // Relationships
  folderId     String?
  folder       Folder?      @relation(fields: [folderId], references: [id], onDelete: SetNull)
  tags         TagOnNote[]
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id         String    @id @default(uuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationships
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes   Note[]
}

model Tag {
  id         String    @id @default(uuid())
  name       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationships
  userId     String?
  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  notes      TagOnNote[]
}

model TagOnNote {
  noteId  String
  note    Note    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tagId   String
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
}

// NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
